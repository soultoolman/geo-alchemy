# -*- coding: utf-8 -*-
import json
import logging

import click

from .exceptions import GeoAlchemyError
from .parsers import (
    PlatformParser, SeriesParser
)


logger = logging.getLogger('geo-alchemy')


@click.group()
@click.option(
    '-d', '--debug-mode', is_flag=True,
    help='enable debug mode'
)
@click.option(
    '-l', '--log-file', type=click.Path(exists=False),
    default='geo-alchemy.log', show_default=True, help='log file'
)
def geo_alchemy(debug_mode, log_file):
    """
    geo-alchemy command line suite
    """
    level = logging.DEBUG if debug_mode else logging.WARNING
    logging.basicConfig(level=level, filename=log_file)


@geo_alchemy.command(name='pp')
@click.option(
    '-sf', '--series-file', required=False,
    help='series metadata json file(must be generated by series.to_dict() method).'
)
@click.option(
    '-sa', '--series-accession', required=False,
    help='series accession, using network to get series metadata.'
)
@click.option(
    '-pa', '--platform-accession', required=False,
    help='platform accession, must be provided when multiple platform this series have.'
)
@click.option(
    '-c', '--cache-dir', default='.',
    help='cache directory, when file existed in cache directory, network downloading will be omitted.'
)
@click.option(
    '-p', '--phenotype-file', default='phenotype.txt',
    show_default=True, help='output phenotype file'
)
@click.option(
    '-e', '--expression-file', default='expression.txt',
    show_default=True, help='output gene expression file'
)
def geo_alchemy_pp(
        series_file, series_accession,
        platform_accession, cache_dir,
        phenotype_file, expression_file
):
    """
    series preprocessing:
    generate phenotype file and gene expression file
    """
    try:
        # 1. parse Series object
        series = None
        if series_file:
            with open(series_file) as fp:
                data = json.load(fp)
            series = SeriesParser.parse_dict(data)
        if series_accession:
            series = SeriesParser.from_accession(series_accession).parse()
        if not series:
            raise click.UsageError('-sf/-sa is needed.')

        # 2. download series matrix file
        smf = series.dl_series_matrix(platform_accession, cache_dir)

        # 3. download platform metadata
        platform = PlatformParser.from_accession(platform_accession, view='full').parse()

        # 4.
    except GeoAlchemyError as exc:
        logger.exception(exc)
        raise click.UsageError(str(exc))
    except Exception as exc:
        logger.exception(exc)
        raise click.UsageError('Unknown error occurred, refer to log file for details.')


if __name__ == '__main__':
    geo_alchemy()
